apply plugin: 'com.android.application'
apply plugin: 'org.greenrobot.greendao'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'kotlin-android-extensions'

android {
    compileSdkVersion rootProject.ext.compileSdkVersion

    aaptOptions {
        cruncherEnabled = false
        useNewCruncher = false
    }
    defaultConfig {
        applicationId "com.jiang.thinkindler"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        multiDexEnabled true

//        javaCompileOptions {
//            annotationProcessorOptions {
//                arguments = [moduleName: project.getName()]
//            }
//        }

        kapt {
            arguments {
                arg("moduleName", project.getName())
            }
        }

        flavorDimensions "versionCode"
    }

    configurations.all {
        resolutionStrategy.force 'com.google.code.findbugs:jsr305:1.3.9'
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

            matchingFallbacks = ['release']
        }
    }

    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
        }

        // Move the build types to build-types/<type>
        // For instance, build-types/debug/java, build-types/debug/AndroidManifest.xml, ...
        // This moves them out of them default location under src/<type>/... which would
        // conflict with src/ being used by the main source set.
        // Adding new build types or product flavors should be accompanied
        // by a similar customization.
        debug.setRoot('build-types/debug')
        release.setRoot('build-types/release')
    }

    lintOptions {

        checkReleaseBuilds false
        abortOnError false
        checkReleaseBuilds false
        // 防止在发布的时候出现因MissingTranslation导致Build Failed!
        disable 'MissingTranslation'
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/rxjava.properties'
    }

    //设置虚拟机堆内存空间大小，避免在编译期间OOM
    dexOptions {
        javaMaxHeapSize "4g"
    }

}

dependencies {
//    implementation fileTree(include: ['*.jar'], dir: 'libs')

    implementation project(':common')

    if (!isModule.toBoolean()) {
        implementation project(':douban')
        implementation project(':meizi')
        implementation project(':media')
    }

    compileOnly 'org.glassfish:javax.annotation:10.0-b28'

    //dagger2
    kapt "com.google.dagger:dagger-compiler:$rootProject.dagger2Version"

    //ARoute
    kapt "com.alibaba:arouter-compiler:$rootProject.routercompilerVersion"

    //kotlin
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jre7:$kotlin_version"
    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"

    // anko
    implementation "org.jetbrains.anko:anko:$rootProject.ankoVersion"
    implementation "org.jetbrains.anko:anko-common:$rootProject.ankoVersion"
    implementation "org.jetbrains.anko:anko-sqlite:$rootProject.ankoVersion"
    implementation "org.jetbrains.anko:anko-coroutines:$rootProject.ankoVersion"

    //内存泄漏监控
    debugImplementation "com.squareup.leakcanary:leakcanary-android:$rootProject.leakcanaryVersion"
    releaseImplementation "com.squareup.leakcanary:leakcanary-android-no-op:$rootProject.leakcanaryVersion"

    //分析卡顿
    debugImplementation 'com.github.markzhai:blockcanary-android:1.5.0'
    releaseImplementation 'com.github.markzhai:blockcanary-no-op:1.5.0'

}
